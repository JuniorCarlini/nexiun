from django.core.management.base import BaseCommand
from django.db import transaction
from projects.models import Bank, CreditLine
from enterprises.models import Enterprise

class Command(BaseCommand):
    help = 'Popula bancos e linhas de cr√©dito no sistema'

    def add_arguments(self, parser):
        parser.add_argument(
            '--enterprise',
            type=str,
            help='Nome ou ID da empresa espec√≠fica (opcional, se n√£o especificado, cria para todas)',
        )

    def handle(self, *args, **options):
        self.stdout.write(self.style.SUCCESS('üè¶ Populando bancos e linhas de cr√©dito...'))
        
        # Determinar empresas para processar
        enterprise_filter = options.get('enterprise')
        if enterprise_filter:
            try:
                # Tentar buscar por ID primeiro, depois por nome
                if enterprise_filter.isdigit():
                    enterprises = Enterprise.objects.filter(id=int(enterprise_filter))
                else:
                    enterprises = Enterprise.objects.filter(name__icontains=enterprise_filter)
                
                if not enterprises.exists():
                    self.stdout.write(self.style.ERROR(f'‚ùå Empresa n√£o encontrada: {enterprise_filter}'))
                    return
                    
                self.stdout.write(f'üìã Processando empresa(s): {[e.name for e in enterprises]}')
            except Exception as e:
                self.stdout.write(self.style.ERROR(f'‚ùå Erro ao buscar empresa: {str(e)}'))
                return
        else:
            enterprises = Enterprise.objects.all()
            if not enterprises.exists():
                self.stdout.write(self.style.ERROR('‚ùå Nenhuma empresa encontrada no sistema'))
                return
            self.stdout.write(f'üìã Processando todas as empresas ({enterprises.count()})')
        
        try:
            with transaction.atomic():
                # Bancos
                banks_data = [
                    {
                        'name': 'Banco do Brasil',
                        'description': 'Fundado em 1808, √© o banco mais antigo do Brasil e um dos maiores da Am√©rica Latina. Possui participa√ß√£o acion√°ria majorit√°ria do governo federal e forte atua√ß√£o no agroneg√≥cio, varejo, c√¢mbio, seguros e gest√£o de ativos.',
                        'is_active': True
                    },
                    {
                        'name': 'Banco da Amaz√¥nia',
                        'description': 'Banco p√∫blico federal criado em 1942, com foco no desenvolvimento econ√¥mico e social da regi√£o Norte. Opera principalmente com recursos do Fundo Constitucional de Financiamento do Norte (FNO).',
                        'is_active': True
                    },
                    {
                        'name': 'Bradesco',
                        'description': 'Fundado em 1943 em Mar√≠lia (SP), √© um dos maiores bancos privados do Brasil, com mais de 70 milh√µes de clientes. Foi pioneiro em internet banking e em servi√ßos de autoatendimento.',
                        'is_active': True
                    },
                    {
                        'name': 'Caixa Econ√¥mica Federal',
                        'description': 'Criada em 1861, √© um banco p√∫blico com forte papel em pol√≠ticas habitacionais, gest√£o do FGTS, programas sociais (como Bolsa Fam√≠lia) e loterias federais.',
                        'is_active': True
                    },
                    {
                        'name': 'Cresol',
                        'description': 'Sistema de cooperativas de cr√©dito fundado em 1995, com foco no financiamento rural e desenvolvimento local, especialmente para agricultores familiares.',
                        'is_active': True
                    },
                    {
                        'name': 'Sicoob',
                        'description': 'Maior sistema cooperativo de cr√©dito do Brasil, com mais de 7 milh√µes de cooperados. Atua no cr√©dito rural, financiamentos pessoais e empresariais, cart√µes e seguros.',
                        'is_active': True
                    },
                    {
                        'name': 'Santander Brasil',
                        'description': 'Subsidi√°ria do grupo espanhol Santander, presente no Brasil desde 1982. √â o terceiro maior banco privado do pa√≠s, atendendo cerca de 70 milh√µes de clientes.',
                        'is_active': True
                    },
                    {
                        'name': 'CrediSis',
                        'description': 'Sistema cooperativo de cr√©dito com atua√ß√£o regional, oferecendo conta corrente, empr√©stimos, financiamentos e linhas de cr√©dito rural.',
                        'is_active': True
                    }
                ]

                # Criar bancos para cada empresa
                total_banks_created = 0
                for enterprise in enterprises:
                    self.stdout.write(f'\nüè¢ Processando empresa: {enterprise.name}')
                    
                    banks_created = 0
                    for bank_data in banks_data:
                        bank, created = Bank.objects.get_or_create(
                            name=bank_data['name'],
                            enterprise=enterprise,
                            defaults={
                                'description': bank_data['description'],
                                'is_active': bank_data['is_active']
                            }
                        )
                        if created:
                            banks_created += 1
                            total_banks_created += 1
                            self.stdout.write(f'  ‚úÖ Banco criado: {bank.name}')
                        else:
                            self.stdout.write(f'  üìÑ Banco j√° existe: {bank.name}')
                    
                    self.stdout.write(f'  üìä Bancos criados para {enterprise.name}: {banks_created}')

                # Linhas de Cr√©dito
                credit_lines_data = [
                    {
                        'name': 'Pronaf Custeio',
                        'description': 'Linha do Programa Nacional de Fortalecimento da Agricultura Familiar voltada para financiar despesas de produ√ß√£o agr√≠cola e pecu√°ria de agricultores familiares.',
                        'is_active': True,
                        'type_credit': 'CUS'
                    },
                    {
                        'name': 'Custeio Agropecu√°rio',
                        'description': 'Cr√©dito para financiar a produ√ß√£o agropecu√°ria, cobrindo despesas como insumos, sementes, ra√ß√£o e defensivos agr√≠colas. Dispon√≠vel para produtores de diversos portes.',
                        'is_active': True,
                        'type_credit': 'CUS'
                    },
                    {
                        'name': 'Pronamp Custeio',
                        'description': 'Linha do Programa Nacional de Apoio ao M√©dio Produtor Rural, destinada a financiar despesas de custeio de safra e cria√ß√£o animal.',
                        'is_active': True,
                        'type_credit': 'CUS'
                    },
                    {
                        'name': 'BB CPR',
                        'description': 'Cr√©dito vinculado √† C√©dula de Produto Rural (CPR), que permite antecipar recursos com base na entrega futura da produ√ß√£o.',
                        'is_active': True,
                        'type_credit': 'OTH'
                    },
                    {
                        'name': 'Pronaf Mais Alimentos',
                        'description': 'Linha do Pronaf voltada ao investimento na moderniza√ß√£o da produ√ß√£o e melhoria da infraestrutura da propriedade.',
                        'is_active': True,
                        'type_credit': 'INV'
                    },
                    {
                        'name': 'Pronaf Mulher',
                        'description': 'Linha exclusiva para mulheres agricultoras familiares, com condi√ß√µes diferenciadas de financiamento.',
                        'is_active': True,
                        'type_credit': 'INV'
                    },
                    {
                        'name': 'Pronamp Investimento',
                        'description': 'Cr√©dito para financiar bens e servi√ßos destinados √† moderniza√ß√£o e amplia√ß√£o da atividade agropecu√°ria de m√©dio porte.',
                        'is_active': True,
                        'type_credit': 'INV'
                    },
                    {
                        'name': 'Investe Agro',
                        'description': 'Linha para investimentos no setor agropecu√°rio, incluindo aquisi√ß√£o de m√°quinas, equipamentos e melhoria de infraestrutura.',
                        'is_active': True,
                        'type_credit': 'INV'
                    },
                    {
                        'name': 'PCA (Programa para Constru√ß√£o e Amplia√ß√£o de Armaz√©ns)',
                        'description': 'Cr√©dito destinado √† constru√ß√£o, amplia√ß√£o, moderniza√ß√£o e reforma de armaz√©ns para produtos agropecu√°rios.',
                        'is_active': True,
                        'type_credit': 'INV'
                    },
                    {
                        'name': 'RenovAgro',
                        'description': 'Linha que financia pr√°ticas agr√≠colas sustent√°veis, recupera√ß√£o de pastagens e integra√ß√£o lavoura-pecu√°ria-floresta.',
                        'is_active': True,
                        'type_credit': 'INV'
                    },
                    {
                        'name': 'InovAgro',
                        'description': 'Cr√©dito para ado√ß√£o de inova√ß√µes tecnol√≥gicas no setor agropecu√°rio, como agricultura de precis√£o e automa√ß√£o.',
                        'is_active': True,
                        'type_credit': 'INV'
                    },
                    {
                        'name': 'ModerFrota',
                        'description': 'Programa para financiar a aquisi√ß√£o de tratores, colheitadeiras e m√°quinas agr√≠colas novas.',
                        'is_active': True,
                        'type_credit': 'INV'
                    },
                    {
                        'name': 'ProIrriga',
                        'description': 'Linha de cr√©dito para sistemas de irriga√ß√£o e armazenagem de √°gua para uso agropecu√°rio.',
                        'is_active': True,
                        'type_credit': 'INV'
                    },
                    {
                        'name': 'FNO Rural (Custeio)',
                        'description': 'Cr√©dito do Fundo Constitucional de Financiamento do Norte para custeio e investimento na produ√ß√£o agropecu√°ria na regi√£o Norte.',
                        'is_active': True,
                        'type_credit': 'CUS'
                    },
                    {
                        'name': 'FNO Rural (Investimento)',
                        'description': 'Cr√©dito do Fundo Constitucional de Financiamento do Norte para custeio e investimento na produ√ß√£o agropecu√°ria na regi√£o Norte.',
                        'is_active': True,
                        'type_credit': 'INV'
                    },
                    {
                        'name': 'Cresol Agro',
                        'description': 'Linha de cr√©dito rural da Cresol para custeio, investimento e comercializa√ß√£o da produ√ß√£o agropecu√°ria.',
                        'is_active': True,
                        'type_credit': 'OTH'
                    }
                ]

                # Criar linhas de cr√©dito para cada empresa
                total_credits_created = 0
                for enterprise in enterprises:
                    self.stdout.write(f'\nüí≥ Processando linhas de cr√©dito para: {enterprise.name}')
                    
                    credits_created = 0
                    for credit_data in credit_lines_data:
                        credit, created = CreditLine.objects.get_or_create(
                            name=credit_data['name'],
                            enterprise=enterprise,
                            defaults={
                                'description': credit_data['description'],
                                'is_active': credit_data['is_active'],
                                'type_credit': credit_data['type_credit']
                            }
                        )
                        if created:
                            credits_created += 1
                            total_credits_created += 1
                            self.stdout.write(f'  ‚úÖ Linha de cr√©dito criada: {credit.name} (Tipo: {credit.get_type_credit_display()})')
                        else:
                            self.stdout.write(f'  üìÑ Linha de cr√©dito j√° existe: {credit.name}')
                    
                    self.stdout.write(f'  üìä Linhas criadas para {enterprise.name}: {credits_created}')

                # Resumo
                self.stdout.write(self.style.SUCCESS('\nüìä RESUMO FINAL:'))
                self.stdout.write(f'  üè¢ Empresas processadas: {enterprises.count()}')
                self.stdout.write(f'  üè¶ Total de bancos criados: {total_banks_created}')
                self.stdout.write(f'  üí≥ Total de linhas de cr√©dito criadas: {total_credits_created}')
                self.stdout.write(f'  üìã Total de bancos no sistema: {Bank.objects.count()}')
                self.stdout.write(f'  üìã Total de linhas de cr√©dito no sistema: {CreditLine.objects.count()}')
                
                self.stdout.write(self.style.SUCCESS('\nüéâ Bancos e linhas de cr√©dito populados com sucesso!'))

        except Exception as e:
            self.stdout.write(self.style.ERROR(f'‚ùå Erro ao popular dados: {str(e)}'))
            raise e 