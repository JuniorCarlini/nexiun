from django.core.management.base import BaseCommand, CommandError
from django.utils import timezone
from django.db import transaction
from units.models import BankAccount, Transaction, Unit
from users.models import User
import random
from datetime import datetime, timedelta
from decimal import Decimal


class Command(BaseCommand):
    help = 'Popula transa√ß√µes de entrada e sa√≠da em uma conta banc√°ria espec√≠fica'

    def add_arguments(self, parser):
        parser.add_argument(
            'bank_account_id',
            type=int,
            help='ID da conta banc√°ria para popular'
        )
        parser.add_argument(
            '--quantidade',
            type=int,
            default=50,
            help='Quantidade de transa√ß√µes para gerar - padr√£o 50'
        )
        parser.add_argument(
            '--meses',
            type=int,
            default=6,
            help='Per√≠odo em meses para gerar transa√ß√µes - padr√£o 6 meses'
        )
        parser.add_argument(
            '--entradas',
            type=int,
            default=60,
            help='Porcentagem de entradas - padr√£o 60 porcento'
        )

    def handle(self, *args, **options):
        bank_account_id = options['bank_account_id']
        quantidade = options['quantidade']
        meses = options['meses']
        entradas_percent = options['entradas']
        
        # Validar conta banc√°ria
        try:
            bank_account = BankAccount.objects.get(id=bank_account_id, is_active=True)
        except BankAccount.DoesNotExist:
            raise CommandError(f'Conta banc√°ria com ID {bank_account_id} n√£o encontrada ou inativa.')
        
        # Verificar se h√° usu√°rios dispon√≠veis
        user = User.objects.filter(is_active=True).first()
        if not user:
            raise CommandError('Nenhum usu√°rio ativo encontrado para criar as transa√ß√µes.')
        
        self.stdout.write(f'Populando {quantidade} transa√ß√µes na conta: {bank_account}')
        self.stdout.write(f'Unidade: {bank_account.unit}')
        self.stdout.write(f'Per√≠odo: {meses} meses')
        self.stdout.write(f'Distribui√ß√£o: {entradas_percent}% entradas, {100-entradas_percent}% sa√≠das')
        self.stdout.write('')
        
        # Calcular datas
        data_final = timezone.now().date()
        data_inicial = data_final - timedelta(days=meses * 30)
        
        # Definir categorias e descri√ß√µes
        entradas_data = {
            'RECEITA': [
                'Receita de vendas', 'Faturamento mensal', 'Receita de servi√ßos',
                'Comiss√£o de vendas', 'Lucro operacional', 'Receita extra'
            ],
            'COMISSAO': [
                'Comiss√£o de vendedor', 'Comiss√£o de parcerias', 'Comiss√£o especial',
                'B√¥nus por meta', 'Incentivo de vendas'
            ],
            'BONUS': [
                'B√¥nus de produtividade', 'B√¥nus trimestral', 'Pr√™mio por performance',
                'B√¥nus de equipe', 'Incentivo especial'
            ],
            'REEMBOLSO': [
                'Reembolso de despesas', 'Devolu√ß√£o de compra', 'Estorno de taxa',
                'Reembolso de viagem', 'Compensa√ß√£o financeira'
            ]
        }
        
        saidas_data = {
            'MATERIAL': [
                'Papel A4 e materiais', 'Canetas e l√°pis', 'Impressora e toner',
                'Pastas e organizadores', 'Material de limpeza'
            ],
            'TRANSPORTE': [
                'Passagem de √¥nibus', 'Taxi para reuni√£o', 'Uber corporativo',
                'Passagem de avi√£o', 'Aluguel de ve√≠culo'
            ],
            'ALIMENTACAO': [
                'Almo√ßo executivo', 'Coffee break reuni√£o', 'Jantar com cliente',
                'Lanche da equipe', 'Restaurante corporativo'
            ],
            'COMBUSTIVEL': [
                'Gasolina ve√≠culo empresa', 'Diesel caminh√£o', 'Etanol carro',
                'Abastecimento frota', 'Combust√≠vel viagem'
            ],
            'MANUTENCAO': [
                'Manuten√ß√£o de equipamentos', 'Reparo de computador', 'Troca de pe√ßas',
                'Manuten√ß√£o predial', 'Limpeza de ar condicionado'
            ],
            'MARKETING': [
                'Publicidade online', 'Material gr√°fico', 'Evento promocional',
                'An√∫ncio em jornal', 'Marketing digital'
            ],
            'TREINAMENTO': [
                'Curso de capacita√ß√£o', 'Workshop t√©cnico', 'Palestra motivacional',
                'Treinamento de vendas', 'Certifica√ß√£o profissional'
            ],
            'OUTROS': [
                'Despesa administrativa', 'Taxa banc√°ria', 'Multa de tr√¢nsito',
                'Seguro empresarial', 'Licenciamento'
            ]
        }
        
        # Gerar transa√ß√µes
        transacoes_criadas = 0
        quantidade_entradas = int(quantidade * entradas_percent / 100)
        quantidade_saidas = quantidade - quantidade_entradas
        
        with transaction.atomic():
            # Gerar entradas
            for i in range(quantidade_entradas):
                categoria = random.choice(list(entradas_data.keys()))
                descricao = random.choice(entradas_data[categoria])
                valor = Decimal(random.uniform(100, 5000)).quantize(Decimal('0.01'))
                data_transacao = data_inicial + timedelta(
                    days=random.randint(0, (data_final - data_inicial).days)
                )
                
                Transaction.objects.create(
                    unit=bank_account.unit,
                    bank_account=bank_account,
                    transaction_type='ENTRADA',
                    category=categoria,
                    description=descricao,
                    amount=valor,
                    date=data_transacao,
                    notes=f'Transa√ß√£o gerada automaticamente - {descricao}',
                    created_by=user,
                    is_active=True
                )
                transacoes_criadas += 1
            
            # Gerar sa√≠das
            for i in range(quantidade_saidas):
                categoria = random.choice(list(saidas_data.keys()))
                descricao = random.choice(saidas_data[categoria])
                
                # Valores mais realistas para cada categoria
                if categoria in ['MATERIAL', 'ALIMENTACAO']:
                    valor = Decimal(random.uniform(10, 500)).quantize(Decimal('0.01'))
                elif categoria in ['TRANSPORTE', 'COMBUSTIVEL']:
                    valor = Decimal(random.uniform(20, 800)).quantize(Decimal('0.01'))
                elif categoria in ['MANUTENCAO', 'MARKETING']:
                    valor = Decimal(random.uniform(100, 2000)).quantize(Decimal('0.01'))
                elif categoria == 'TREINAMENTO':
                    valor = Decimal(random.uniform(200, 3000)).quantize(Decimal('0.01'))
                else:  # OUTROS
                    valor = Decimal(random.uniform(50, 1500)).quantize(Decimal('0.01'))
                
                data_transacao = data_inicial + timedelta(
                    days=random.randint(0, (data_final - data_inicial).days)
                )
                
                Transaction.objects.create(
                    unit=bank_account.unit,
                    bank_account=bank_account,
                    transaction_type='SAIDA',
                    category=categoria,
                    description=descricao,
                    amount=valor,
                    date=data_transacao,
                    notes=f'Transa√ß√£o gerada automaticamente - {descricao}',
                    created_by=user,
                    is_active=True
                )
                transacoes_criadas += 1
        
        # Calcular estat√≠sticas
        total_entradas = bank_account.get_total_entradas()
        total_saidas = bank_account.get_total_saidas()
        saldo_atual = bank_account.get_current_balance()
        
        self.stdout.write('')
        self.stdout.write(self.style.SUCCESS(f'‚úÖ {transacoes_criadas} transa√ß√µes criadas com sucesso!'))
        self.stdout.write('')
        self.stdout.write('üìä Estat√≠sticas da conta:')
        self.stdout.write(f'   üíö Total de entradas: R$ {total_entradas:,.2f}')
        self.stdout.write(f'   üí∏ Total de sa√≠das: R$ {total_saidas:,.2f}')
        self.stdout.write(f'   üí∞ Saldo atual: R$ {saldo_atual:,.2f}')
        self.stdout.write('')
        self.stdout.write(f'üè¶ Conta: {bank_account.bank_name} - {bank_account.name}')
        self.stdout.write(f'üè¢ Unidade: {bank_account.unit.name}')
        self.stdout.write(f'üë§ Criado por: {user.name} ({user.email})') 