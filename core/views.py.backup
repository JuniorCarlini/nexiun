from django.shortcuts import render
from django.http import HttpResponseNotFound, HttpResponseServerError, HttpResponseForbidden, JsonResponse
from django.contrib.auth.decorators import login_required
from django.views.decorators.http import require_POST
from django.views.decorators.csrf import csrf_exempt
from django.contrib import messages
import json


def custom_404_view(request, exception):
    """
    View personalizada para erro 404 - Página não encontrada
    """
    return HttpResponseNotFound(render(request, 'errors/404.html'))


def custom_500_view(request):
    """
    View personalizada para erro 500 - Erro interno do servidor
    """
    return HttpResponseServerError(render(request, 'errors/500.html'))


def custom_403_view(request, exception):
    """
    View personalizada para erro 403 - Acesso negado
    """
    return HttpResponseForbidden(render(request, 'errors/403.html'))


@login_required
@require_POST  
def select_unit(request):
    """View para selecionar unidade ativa na sessão"""
    try:
        data = json.loads(request.body)
        unit_id = data.get('unit_id')
        
        if not unit_id:
            return JsonResponse({'success': False, 'message': 'ID da unidade é obrigatório'})
        
        # Verificar se o usuário tem acesso à unidade
        if not request.user.units.filter(id=unit_id, is_active=True).exists():
            return JsonResponse({'success': False, 'message': 'Você não tem acesso a esta unidade'})
        
        # Salvar unidade selecionada na sessão
        request.session['selected_unit_id'] = int(unit_id)
        
        # Buscar dados da unidade
        unit = request.user.units.get(id=unit_id)
        
        # Adicionar mensagem de sucesso usando o sistema Django
        messages.success(request, f'Unidade "{unit.name}" selecionada com sucesso!')
        
        return JsonResponse({'success': True})
        
    except Exception as e:
        return JsonResponse({'success': False, 'message': 'Erro interno do servidor'})
