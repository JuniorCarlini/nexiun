from django.core.management.base import BaseCommand
from django.db import transaction
from users.permissions import create_custom_permissions, create_system_modules, create_default_roles

class Command(BaseCommand):
    help = 'Configura permiss√µes customizadas, m√≥dulos e roles do sistema'

    def add_arguments(self, parser):
        parser.add_argument(
            '--reset',
            action='store_true',
            help='Recria todos os dados (use com cuidado)',
        )

    def handle(self, *args, **options):
        self.stdout.write(self.style.SUCCESS('Iniciando configura√ß√£o do sistema de permiss√µes...'))
        
        try:
            with transaction.atomic():
                # Cria m√≥dulos do sistema
                self.stdout.write('Criando m√≥dulos do sistema...')
                modules = create_system_modules()
                if modules:
                    self.stdout.write(
                        self.style.SUCCESS(f'‚úì {len(modules)} m√≥dulos criados: {[m.name for m in modules]}')
                    )
                else:
                    self.stdout.write('‚Ä¢ M√≥dulos j√° existem')

                # Cria permiss√µes customizadas
                self.stdout.write('Criando permiss√µes customizadas...')
                permissions = create_custom_permissions()
                if permissions:
                    self.stdout.write(
                        self.style.SUCCESS(f'‚úì {len(permissions)} permiss√µes criadas')
                    )
                else:
                    self.stdout.write('‚Ä¢ Permiss√µes j√° existem')

                # Cria roles padr√£o
                self.stdout.write('Criando cargos padr√£o...')
                roles = create_default_roles()
                if roles:
                    self.stdout.write(
                        self.style.SUCCESS(f'‚úì {len(roles)} cargos criados: {[r.name for r in roles]}')
                    )
                else:
                    self.stdout.write('‚Ä¢ Cargos j√° existem (permiss√µes atualizadas)')

                self.stdout.write(
                    self.style.SUCCESS('\nüéâ Sistema de permiss√µes configurado com sucesso!')
                )
                self.stdout.write(
                    self.style.WARNING('üìù Agora voc√™ pode executar as migra√ß√µes: python manage.py migrate')
                )

        except Exception as e:
            self.stdout.write(
                self.style.ERROR(f'‚ùå Erro ao configurar sistema de permiss√µes: {str(e)}')
            )
            raise 