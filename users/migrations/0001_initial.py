# Generated by Django 5.2.5 on 2025-09-10 22:23

import django.db.models.deletion
import users.models
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ("auth", "0012_alter_user_first_name_max_length"),
        ("enterprises", "0001_initial"),
        ("units", "0001_initial"),
    ]

    operations = [
        migrations.CreateModel(
            name="SystemModule",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "name",
                    models.CharField(max_length=100, unique=True, verbose_name="Nome"),
                ),
                (
                    "code",
                    models.CharField(max_length=50, unique=True, verbose_name="Código"),
                ),
                ("description", models.TextField(blank=True, verbose_name="Descrição")),
                (
                    "icon",
                    models.CharField(
                        blank=True, max_length=50, verbose_name="Ícone Bootstrap"
                    ),
                ),
                ("is_active", models.BooleanField(default=True, verbose_name="Ativo")),
                ("order", models.PositiveIntegerField(default=0, verbose_name="Ordem")),
            ],
            options={
                "verbose_name": "Módulo do Sistema",
                "verbose_name_plural": "Módulos do Sistema",
                "ordering": ["order", "name"],
            },
        ),
        migrations.CreateModel(
            name="Role",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "name",
                    models.CharField(max_length=100, unique=True, verbose_name="Nome"),
                ),
                (
                    "code",
                    models.CharField(max_length=50, unique=True, verbose_name="Código"),
                ),
                ("description", models.TextField(blank=True, verbose_name="Descrição")),
                ("is_active", models.BooleanField(default=True, verbose_name="Ativo")),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                (
                    "permissions",
                    models.ManyToManyField(
                        blank=True,
                        help_text="Permissões padrão deste cargo",
                        to="auth.permission",
                        verbose_name="Permissões",
                    ),
                ),
            ],
            options={
                "verbose_name": "Cargo",
                "verbose_name_plural": "Cargos",
                "ordering": ["name"],
            },
        ),
        migrations.CreateModel(
            name="User",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("password", models.CharField(max_length=128, verbose_name="password")),
                (
                    "last_login",
                    models.DateTimeField(
                        blank=True, null=True, verbose_name="last login"
                    ),
                ),
                (
                    "is_superuser",
                    models.BooleanField(
                        default=False,
                        help_text="Designates that this user has all permissions without explicitly assigning them.",
                        verbose_name="superuser status",
                    ),
                ),
                ("name", models.CharField(max_length=255, verbose_name="Nome")),
                (
                    "email",
                    models.EmailField(
                        max_length=254, null=True, unique=True, verbose_name="Email"
                    ),
                ),
                (
                    "cpf",
                    models.CharField(
                        max_length=14, null=True, unique=True, verbose_name="CPF"
                    ),
                ),
                (
                    "phone",
                    models.CharField(max_length=20, null=True, verbose_name="Telefone"),
                ),
                (
                    "theme_preference",
                    models.CharField(
                        choices=[
                            ("light", "Tema Claro"),
                            ("dark", "Tema Escuro"),
                            ("auto", "Automático (Sistema)"),
                        ],
                        default="light",
                        help_text="Escolha o tema de aparência do sistema",
                        max_length=10,
                        verbose_name="Preferência de Tema",
                    ),
                ),
                (
                    "date_of_birth",
                    models.DateField(
                        blank=True, null=True, verbose_name="Data de Nascimento"
                    ),
                ),
                (
                    "profile_image",
                    models.ImageField(
                        blank=True,
                        null=True,
                        upload_to=users.models.user_directory_path,
                        verbose_name="Imagem de Perfil",
                    ),
                ),
                ("is_active", models.BooleanField(default=True, verbose_name="Ativo")),
                (
                    "is_staff",
                    models.BooleanField(default=False, verbose_name="Django Staff"),
                ),
                (
                    "custom_permissions",
                    models.ManyToManyField(
                        blank=True,
                        help_text="Permissões específicas além das do cargo",
                        related_name="users_with_custom_permission",
                        to="auth.permission",
                        verbose_name="Permissões Customizadas",
                    ),
                ),
                (
                    "enterprise",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        to="enterprises.enterprise",
                        verbose_name="Empresa",
                    ),
                ),
                (
                    "groups",
                    models.ManyToManyField(
                        blank=True,
                        help_text="The groups this user belongs to. A user will get all permissions granted to each of their groups.",
                        related_name="user_set",
                        related_query_name="user",
                        to="auth.group",
                        verbose_name="groups",
                    ),
                ),
                (
                    "units",
                    models.ManyToManyField(
                        blank=True,
                        related_name="users",
                        to="units.unit",
                        verbose_name="Unidades",
                    ),
                ),
                (
                    "user_permissions",
                    models.ManyToManyField(
                        blank=True,
                        help_text="Specific permissions for this user.",
                        related_name="user_set",
                        related_query_name="user",
                        to="auth.permission",
                        verbose_name="user permissions",
                    ),
                ),
                (
                    "roles",
                    models.ManyToManyField(
                        blank=True,
                        help_text="Cargos atribuídos ao usuário",
                        related_name="users",
                        to="users.role",
                        verbose_name="Cargos",
                    ),
                ),
            ],
            options={
                "abstract": False,
            },
        ),
    ]
