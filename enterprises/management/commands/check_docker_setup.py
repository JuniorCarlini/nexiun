from django.core.management.base import BaseCommand
from django.conf import settings
from enterprises.models import Enterprise
import os


class Command(BaseCommand):
    help = 'Verifica a configura√ß√£o Docker e ambiente'

    def handle(self, *args, **options):
        self.stdout.write(self.style.SUCCESS('\nüê≥ VERIFICA√á√ÉO DO AMBIENTE DOCKER'))
        self.stdout.write('=' * 60)
        
        # Verificar vari√°veis de ambiente
        self.stdout.write('\nüìã VARI√ÅVEIS DE AMBIENTE:')
        env_vars = [
            ('DEBUG', 'DEBUG'),
            ('SECRET_KEY', 'SECRET_KEY'),
            ('DATABASE_URL', 'DATABASE_URL'),
            ('ALLOWED_HOSTS', 'ALLOWED_HOSTS'),
            ('CSRF_TRUSTED_ORIGINS', 'CSRF_TRUSTED_ORIGINS'),
        ]
        
        for env_name, setting_name in env_vars:
            env_value = os.getenv(env_name, 'N√£o definida')
            setting_value = getattr(settings, setting_name, 'N√£o definida')
            
            if env_value != 'N√£o definida':
                self.stdout.write(f'   ‚úÖ {env_name}: {env_value[:50]}...')
            else:
                self.stdout.write(f'   ‚ö†Ô∏è  {env_name}: Usando padr√£o do settings.py')
        
        # Verificar banco de dados
        self.stdout.write('\nüóÑÔ∏è BANCO DE DADOS:')
        try:
            from django.db import connection
            with connection.cursor() as cursor:
                cursor.execute("SELECT 1")
                self.stdout.write('   ‚úÖ Conex√£o com banco de dados: OK')
                
            # Verificar tabelas
            from django.core.management import execute_from_command_line
            tables = connection.introspection.table_names()
            if 'enterprises_enterprise' in tables:
                self.stdout.write('   ‚úÖ Tabela enterprises_enterprise: Existe')
            else:
                self.stdout.write('   ‚ùå Tabela enterprises_enterprise: N√£o existe')
                
        except Exception as e:
            self.stdout.write(f'   ‚ùå Erro no banco de dados: {e}')
        
        # Verificar migra√ß√µes
        self.stdout.write('\nüîÑ MIGRA√á√ïES:')
        try:
            from django.db.migrations.executor import MigrationExecutor
            from django.db import connection
            
            executor = MigrationExecutor(connection)
            plan = executor.migration_plan(executor.loader.graph.leaf_nodes())
            
            if plan:
                self.stdout.write(f'   ‚ö†Ô∏è  Migra√ß√µes pendentes: {len(plan)}')
                for migration in plan:
                    self.stdout.write(f'      ‚Ä¢ {migration[0]}.{migration[1]}')
            else:
                self.stdout.write('   ‚úÖ Todas as migra√ß√µes aplicadas')
                
        except Exception as e:
            self.stdout.write(f'   ‚ùå Erro ao verificar migra√ß√µes: {e}')
        
        # Verificar empresas
        self.stdout.write('\nüè¢ EMPRESAS CADASTRADAS:')
        try:
            enterprises = Enterprise.objects.all()
            if enterprises:
                for enterprise in enterprises:
                    self.stdout.write(f'   ‚úÖ {enterprise.name}: {enterprise.subdomain}.nexiun.com.br')
            else:
                self.stdout.write('   ‚ö†Ô∏è  Nenhuma empresa cadastrada')
                
        except Exception as e:
            self.stdout.write(f'   ‚ùå Erro ao verificar empresas: {e}')
        
        # Verificar arquivos est√°ticos
        self.stdout.write('\nüìÅ ARQUIVOS EST√ÅTICOS:')
        static_root = getattr(settings, 'STATIC_ROOT', None)
        if static_root and os.path.exists(static_root):
            files_count = sum([len(files) for r, d, files in os.walk(static_root)])
            self.stdout.write(f'   ‚úÖ STATIC_ROOT: {static_root} ({files_count} arquivos)')
        else:
            self.stdout.write('   ‚ö†Ô∏è  STATIC_ROOT n√£o configurado ou n√£o existe')
        
        # Verificar sa√∫de geral
        self.stdout.write('\nüéØ COMANDOS √öTEIS:')
        commands = [
            'docker-compose up -d  # Iniciar servi√ßos',
            'docker-compose logs web  # Ver logs da aplica√ß√£o',
            'docker-compose exec web python manage.py migrate  # Executar migra√ß√µes',
            'docker-compose exec web python manage.py collectstatic  # Coletar est√°ticos',
            'docker-compose exec web python manage.py createsuperuser  # Criar superusu√°rio',
            'docker-compose down  # Parar servi√ßos',
        ]
        
        for cmd in commands:
            self.stdout.write(f'   {cmd}')
        
        # Status final
        self.stdout.write('\n' + '=' * 60)
        self.stdout.write(self.style.SUCCESS('üéâ Verifica√ß√£o conclu√≠da!'))
        
        # URLs de teste
        self.stdout.write('\nüåê TESTAR EM:')
        test_urls = [
            'http://localhost:8000',
            'http://localhost:8000/admin/',
            'http://localhost:8000/users/login/',
        ]
        
        for url in test_urls:
            self.stdout.write(f'   üîó {url}') 